{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"samuele_code.ipynb（副本）","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"ca59fd81ddd7420bb630889d70a970b7":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_4f2306a096b544fe8041fb6966d00be2","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_c5525b6ce5ef448eb5025e505e015236","IPY_MODEL_40479eb3b02c484e99298077c377f726","IPY_MODEL_58a5e18177664aeab3ff29afb43a23f0"]}},"4f2306a096b544fe8041fb6966d00be2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"c5525b6ce5ef448eb5025e505e015236":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_b833bc02cbd2476a9dd2d5f79d6209d5","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_4f6db316a65d4932a9b9049f274e36a8"}},"40479eb3b02c484e99298077c377f726":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_0c65189ecf734c4587e4bc7d511a780d","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":14212972,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":14212972,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_4bb1bacd9d344614bc38c9a527e5395e"}},"58a5e18177664aeab3ff29afb43a23f0":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_017d3788cd694d8796b3b52d974fb7db","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 13.6M/13.6M [00:00&lt;00:00, 41.6MB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_8046a00fff2745ffb3e9075f9e4c30d0"}},"b833bc02cbd2476a9dd2d5f79d6209d5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"4f6db316a65d4932a9b9049f274e36a8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"0c65189ecf734c4587e4bc7d511a780d":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"4bb1bacd9d344614bc38c9a527e5395e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"017d3788cd694d8796b3b52d974fb7db":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"8046a00fff2745ffb3e9075f9e4c30d0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"365b0442dbc94b3a998d60b74848209d":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_732b3c141326487dbbc6d0635001de7d","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_e9209e33ee334909b9f8d793ffa24684","IPY_MODEL_eda3d86da8e8411ebd4626d9a34b6e54","IPY_MODEL_e96639f2ec20411da7b7dd6244f81892"]}},"732b3c141326487dbbc6d0635001de7d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"e9209e33ee334909b9f8d793ffa24684":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_1c10f34f16104fb682ca6b289fab539e","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_674ab8799ec1421493873be23229c3c1"}},"eda3d86da8e8411ebd4626d9a34b6e54":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_7acb4d436aef42c0aa352672364da4ca","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":167502836,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":167502836,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_1977a8ce781b411eb0e9516009c42f79"}},"e96639f2ec20411da7b7dd6244f81892":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_7bced75f51f7453ba35e6f188e7b8182","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 160M/160M [00:02&lt;00:00, 63.1MB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_0792ce3b46cf4d0685eb8d0f0aa547b3"}},"1c10f34f16104fb682ca6b289fab539e":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"674ab8799ec1421493873be23229c3c1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7acb4d436aef42c0aa352672364da4ca":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"1977a8ce781b411eb0e9516009c42f79":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7bced75f51f7453ba35e6f188e7b8182":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"0792ce3b46cf4d0685eb8d0f0aa547b3":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wZvaxUTZu6So","executionInfo":{"status":"ok","timestamp":1638007640376,"user_tz":-60,"elapsed":235,"user":{"displayName":"Samuele Sermisoni","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13640648701021405346"}},"outputId":"8b119f55-f3e4-4230-cd84-098fb5bf62d9"},"source":["}from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","metadata":{"id":"ptkMFjVhvLHl"},"source":["drive_path = 'drive/My Drive'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0SlmwpjoATQN","executionInfo":{"status":"ok","timestamp":1638005043443,"user_tz":-60,"elapsed":14034,"user":{"displayName":"Samuele Sermisoni","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13640648701021405346"}},"outputId":"c5bb9038-3ba3-44a2-e28d-8dfabe2a1fe7"},"source":["import os\n","import numpy as np\n","import torch\n","from PIL import Image\n","import xml.etree.ElementTree as ET\n","\n","class Take_training_image(torch.utils.data.Dataset):\n","    def __init__(self, root, transforms=None):\n","        self.root = root\n","        self.transforms = transforms\n","        # load all image files, sorting them to\n","        # ensure that they are aligned\n","        self.imgs = list(sorted(os.listdir(os.path.join(self.root,\"images_giusti\"))))\n","\n","    def __getitem__(self, idx):\n","        # load images and masks\n","        img_path = os.path.join(self.root, \"images_giusti\", self.imgs[idx])\n","        img = Image.open(img_path).convert(\"RGB\")\n","\n","        tree = ET.parse(os.path.join(drive_path, 'frames_giusti', 'frame_'+str(idx).zfill(6)+'.xml'))\n","        root = tree.getroot()\n","\n","        boxes = []\n","        label=[]\n","        area=0;\n","        for objects in root.findall('object'):\n","          for objects1 in objects.findall('bndbox'):\n","            xmin = float(objects1.find('xmin').text)\n","            ymin = float(objects1.find('ymin').text)\n","            xmax = float(objects1.find('xmax').text)\n","            ymax = float(objects1.find('ymax').text)\n","          can_type = objects.find('name').text\n","          if(can_type == 'beer'):\n","            can_type = 1\n","          else:\n","            can_type = 2\n","          boxes.append([xmin, ymin, xmax, ymax])\n","          label.append(can_type)\n","          # boxes1 = torch.as_tensor(boxes, dtype=torch.float32)\n","          \n","#        print(boxes)\n","#        print(label)\n","        \n","        \n","        if boxes:\n","          boxes = torch.as_tensor(boxes, dtype=torch.float32)\n","          area = (boxes[:, 3] - boxes[:, 1]) * (boxes[:, 2] - boxes[:, 0])\n","        boxes = torch.as_tensor(boxes, dtype=torch.float32)\n","\n","        # there is only one class\n","        labels = torch.as_tensor(label, dtype=torch.int64)\n","        image_id = torch.tensor([idx])\n","        \n","        # suppose all instances are not crowd\n","        iscrowd = torch.zeros(len(label), dtype=torch.int64)\n","\n","        target = {}\n","        target[\"boxes\"] = boxes\n","        target[\"labels\"] = labels\n","        target[\"image_id\"] = image_id\n","        target[\"area\"] = area\n","        target[\"iscrowd\"] = iscrowd\n","        if self.transforms is not None:\n","            img, target = self.transforms(img, target)\n","        return img, target\n","\n","    def __len__(self):\n","        return len(self.imgs)\n","\n","\n","\n","dataset = Take_training_image(drive_path)\n","dataset[12]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(<PIL.Image.Image image mode=RGB size=640x480 at 0x7F854525A750>,\n"," {'area': tensor([5504.5122]),\n","  'boxes': tensor([[ 95.9200,  74.8600, 160.8700, 159.6100]]),\n","  'image_id': tensor([12]),\n","  'iscrowd': tensor([0]),\n","  'labels': tensor([1])})"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"UxINnSpZu5CO","colab":{"base_uri":"https://localhost:8080/","height":67,"referenced_widgets":["ca59fd81ddd7420bb630889d70a970b7","4f2306a096b544fe8041fb6966d00be2","c5525b6ce5ef448eb5025e505e015236","40479eb3b02c484e99298077c377f726","58a5e18177664aeab3ff29afb43a23f0","b833bc02cbd2476a9dd2d5f79d6209d5","4f6db316a65d4932a9b9049f274e36a8","0c65189ecf734c4587e4bc7d511a780d","4bb1bacd9d344614bc38c9a527e5395e","017d3788cd694d8796b3b52d974fb7db","8046a00fff2745ffb3e9075f9e4c30d0"]},"executionInfo":{"status":"ok","timestamp":1638005050760,"user_tz":-60,"elapsed":2060,"user":{"displayName":"Samuele Sermisoni","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13640648701021405346"}},"outputId":"2e1a023d-8c9e-4d8b-93aa-36a0c9ffcfa5"},"source":["import torchvision\n","from torchvision.models.detection import FasterRCNN\n","from torchvision.models.detection.rpn import AnchorGenerator\n","\n","# load a pre-trained model for classification and return\n","# only the features\n","backbone = torchvision.models.mobilenet_v2(pretrained=True).features\n","backbone.out_channels = 1280\n","anchor_generator = AnchorGenerator(sizes=((70),),\n","                                   aspect_ratios=((0.5, 1.0, 1.5),))\n","roi_pooler = torchvision.ops.MultiScaleRoIAlign(featmap_names=['0'],\n","                                                output_size=7,\n","                                                sampling_ratio=2)\n","model = FasterRCNN(backbone,\n","                   num_classes=3,\n","                   rpn_anchor_generator=anchor_generator,\n","                   box_roi_pool=roi_pooler,\n","                   min_size=300,\n","                   max_size=400)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Downloading: \"https://download.pytorch.org/models/mobilenet_v2-b0353104.pth\" to /root/.cache/torch/hub/checkpoints/mobilenet_v2-b0353104.pth\n"]},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"ca59fd81ddd7420bb630889d70a970b7","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0.00/13.6M [00:00<?, ?B/s]"]},"metadata":{}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0EnWVM2fzoYw","executionInfo":{"status":"ok","timestamp":1636992169938,"user_tz":-60,"elapsed":69,"user":{"displayName":"Carlos Carrion","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06678645044778304547"}},"outputId":"c52c944f-fe2f-4889-b9da-1d2bf0690d72"},"source":["model"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["FasterRCNN(\n","  (transform): GeneralizedRCNNTransform(\n","      Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n","      Resize(min_size=(300,), max_size=400, mode='bilinear')\n","  )\n","  (backbone): Sequential(\n","    (0): ConvNormActivation(\n","      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (2): ReLU6(inplace=True)\n","    )\n","    (1): InvertedResidual(\n","      (conv): Sequential(\n","        (0): ConvNormActivation(\n","          (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)\n","          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (1): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (2): InvertedResidual(\n","      (conv): Sequential(\n","        (0): ConvNormActivation(\n","          (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (1): ConvNormActivation(\n","          (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)\n","          (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (2): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (3): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (3): InvertedResidual(\n","      (conv): Sequential(\n","        (0): ConvNormActivation(\n","          (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (1): ConvNormActivation(\n","          (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)\n","          (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (2): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (3): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (4): InvertedResidual(\n","      (conv): Sequential(\n","        (0): ConvNormActivation(\n","          (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (1): ConvNormActivation(\n","          (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144, bias=False)\n","          (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (2): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (5): InvertedResidual(\n","      (conv): Sequential(\n","        (0): ConvNormActivation(\n","          (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (1): ConvNormActivation(\n","          (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)\n","          (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (2): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (6): InvertedResidual(\n","      (conv): Sequential(\n","        (0): ConvNormActivation(\n","          (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (1): ConvNormActivation(\n","          (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)\n","          (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (2): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (7): InvertedResidual(\n","      (conv): Sequential(\n","        (0): ConvNormActivation(\n","          (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (1): ConvNormActivation(\n","          (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)\n","          (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (2): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (8): InvertedResidual(\n","      (conv): Sequential(\n","        (0): ConvNormActivation(\n","          (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (1): ConvNormActivation(\n","          (0): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)\n","          (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (2): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (9): InvertedResidual(\n","      (conv): Sequential(\n","        (0): ConvNormActivation(\n","          (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (1): ConvNormActivation(\n","          (0): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)\n","          (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (2): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (10): InvertedResidual(\n","      (conv): Sequential(\n","        (0): ConvNormActivation(\n","          (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (1): ConvNormActivation(\n","          (0): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)\n","          (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (2): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (11): InvertedResidual(\n","      (conv): Sequential(\n","        (0): ConvNormActivation(\n","          (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (1): ConvNormActivation(\n","          (0): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)\n","          (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (2): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (12): InvertedResidual(\n","      (conv): Sequential(\n","        (0): ConvNormActivation(\n","          (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (1): ConvNormActivation(\n","          (0): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)\n","          (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (2): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (13): InvertedResidual(\n","      (conv): Sequential(\n","        (0): ConvNormActivation(\n","          (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (1): ConvNormActivation(\n","          (0): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)\n","          (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (2): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (3): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (14): InvertedResidual(\n","      (conv): Sequential(\n","        (0): ConvNormActivation(\n","          (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (1): ConvNormActivation(\n","          (0): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576, bias=False)\n","          (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (2): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (15): InvertedResidual(\n","      (conv): Sequential(\n","        (0): ConvNormActivation(\n","          (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (1): ConvNormActivation(\n","          (0): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)\n","          (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (2): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (16): InvertedResidual(\n","      (conv): Sequential(\n","        (0): ConvNormActivation(\n","          (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (1): ConvNormActivation(\n","          (0): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)\n","          (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (2): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (3): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (17): InvertedResidual(\n","      (conv): Sequential(\n","        (0): ConvNormActivation(\n","          (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (1): ConvNormActivation(\n","          (0): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)\n","          (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","          (2): ReLU6(inplace=True)\n","        )\n","        (2): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (3): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (18): ConvNormActivation(\n","      (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (2): ReLU6(inplace=True)\n","    )\n","  )\n","  (rpn): RegionProposalNetwork(\n","    (anchor_generator): AnchorGenerator()\n","    (head): RPNHead(\n","      (conv): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (cls_logits): Conv2d(1280, 3, kernel_size=(1, 1), stride=(1, 1))\n","      (bbox_pred): Conv2d(1280, 12, kernel_size=(1, 1), stride=(1, 1))\n","    )\n","  )\n","  (roi_heads): RoIHeads(\n","    (box_roi_pool): MultiScaleRoIAlign(featmap_names=['0'], output_size=(7, 7), sampling_ratio=2)\n","    (box_head): TwoMLPHead(\n","      (fc6): Linear(in_features=62720, out_features=1024, bias=True)\n","      (fc7): Linear(in_features=1024, out_features=1024, bias=True)\n","    )\n","    (box_predictor): FastRCNNPredictor(\n","      (cls_score): Linear(in_features=1024, out_features=3, bias=True)\n","      (bbox_pred): Linear(in_features=1024, out_features=12, bias=True)\n","    )\n","  )\n",")"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P-Mn1xPo0yuZ","executionInfo":{"status":"ok","timestamp":1638005082364,"user_tz":-60,"elapsed":16043,"user":{"displayName":"Samuele Sermisoni","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13640648701021405346"}},"outputId":"e7038fd3-56db-42f2-937e-c7e4eb3638ac"},"source":["%%shell\n","git clone https://github.com/pytorch/vision.git\n","cd vision\n","git checkout v0.8.2\n","\n","cp references/detection/utils.py ../\n","cp references/detection/transforms.py ../\n","cp references/detection/coco_eval.py ../\n","cp references/detection/engine.py ../\n","cp references/detection/coco_utils.py ../"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'vision'...\n","remote: Enumerating objects: 57514, done.\u001b[K\n","remote: Counting objects: 100% (22983/22983), done.\u001b[K\n","remote: Compressing objects: 100% (3785/3785), done.\u001b[K\n","remote: Total 57514 (delta 19550), reused 22087 (delta 18977), pack-reused 34531\n","Receiving objects: 100% (57514/57514), 109.38 MiB | 29.38 MiB/s, done.\n","Resolving deltas: 100% (46103/46103), done.\n","Note: checking out 'v0.8.2'.\n","\n","You are in 'detached HEAD' state. You can look around, make experimental\n","changes and commit them, and you can discard any commits you make in this\n","state without impacting any branches by performing another checkout.\n","\n","If you want to create a new branch to retain commits you create, you may\n","do so (now or later) by using -b with the checkout command again. Example:\n","\n","  git checkout -b <new-branch-name>\n","\n","HEAD is now at 2f40a483 [v0.8.X] .circleci: Add Python 3.9 to CI (#3063)\n"]},{"output_type":"execute_result","data":{"text/plain":[""]},"metadata":{},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"VNkJCdaU0oQD"},"source":["import transforms as T\n","from engine import train_one_epoch, evaluate\n","import utils\n","\n","def get_transform(train):\n","    transforms = []\n","    transforms.append(T.ToTensor())\n","    if train:\n","        transforms.append(T.RandomHorizontalFlip(0.5))\n","    return T.Compose(transforms)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OC_RvlZL1Iiu","colab":{"base_uri":"https://localhost:8080/","height":68,"referenced_widgets":["365b0442dbc94b3a998d60b74848209d","732b3c141326487dbbc6d0635001de7d","e9209e33ee334909b9f8d793ffa24684","eda3d86da8e8411ebd4626d9a34b6e54","e96639f2ec20411da7b7dd6244f81892","1c10f34f16104fb682ca6b289fab539e","674ab8799ec1421493873be23229c3c1","7acb4d436aef42c0aa352672364da4ca","1977a8ce781b411eb0e9516009c42f79","7bced75f51f7453ba35e6f188e7b8182","0792ce3b46cf4d0685eb8d0f0aa547b3"]},"executionInfo":{"status":"ok","timestamp":1637160450177,"user_tz":-60,"elapsed":4017,"user":{"displayName":"Samuele Sermisoni","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13640648701021405346"}},"outputId":"a8fbc6f5-fbd0-44b4-c0b9-4806f9784c5c"},"source":["model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Downloading: \"https://download.pytorch.org/models/fasterrcnn_resnet50_fpn_coco-258fb6c6.pth\" to /root/.cache/torch/hub/checkpoints/fasterrcnn_resnet50_fpn_coco-258fb6c6.pth\n"]},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"365b0442dbc94b3a998d60b74848209d","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0.00/160M [00:00<?, ?B/s]"]},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"wLTG3WpLMN_9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637160461958,"user_tz":-60,"elapsed":953,"user":{"displayName":"Samuele Sermisoni","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13640648701021405346"}},"outputId":"c75873e0-0d17-4eb0-e95e-9205ea70029e"},"source":["dataset = Take_training_image(drive_path, get_transform(train=True))\n","dataset_test = Take_training_image(drive_path, get_transform(train=False))\n","\n","# split the dataset in train and test set\n","torch.manual_seed(1)\n","indices = torch.randperm(len(dataset)).tolist()\n","dataset = torch.utils.data.Subset(dataset, indices[:-200])\n","dataset_test = torch.utils.data.Subset(dataset_test, indices[-200:])\n","\n","# define training and validation data loaders\n","data_loader = torch.utils.data.DataLoader(\n","    dataset, batch_size=8, shuffle=True, num_workers=4,\n","    collate_fn=utils.collate_fn)\n","\n","data_loader_test = torch.utils.data.DataLoader(\n","    dataset_test, batch_size=1, shuffle=False, num_workers=4,\n","    collate_fn=utils.collate_fn)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  cpuset_checked))\n"]}]},{"cell_type":"code","metadata":{"id":"0Sqt6PWWconC"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rkFZm1wUI8S8"},"source":["device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')\n","\n","\n","\n","# get the model using our helper function\n","#model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)\n","# move model to the right device\n","model.to(device)\n","\n","# construct an optimizer\n","params = [p for p in model.parameters() if p.requires_grad]\n","optimizer = torch.optim.SGD(params, lr=0.005,\n","                            momentum=0.9, weight_decay=0.0005)\n","\n","# and a learning rate scheduler which decreases the learning rate by\n","# 10x every 3 epochs\n","lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer,\n","                                               step_size=3,\n","                                               gamma=0.1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CZ5hJ2y6Lk82","executionInfo":{"status":"ok","timestamp":1637163841422,"user_tz":-60,"elapsed":3336934,"user":{"displayName":"Samuele Sermisoni","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13640648701021405346"}},"outputId":"eca00f33-936b-45d5-aba0-41defded24bb"},"source":["from torch.optim.lr_scheduler import StepLR\n","num_epochs = 3\n","\n","for epoch in range(num_epochs):\n","    # train for one epoch, printing every 10 iterations\n","    train_one_epoch(model, optimizer, data_loader, device, epoch, print_freq=10)\n","    # update the learning rate\n","    lr_scheduler.step()\n","    # evaluate on the test dataset\n","    evaluate(model, data_loader_test, device=device)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  cpuset_checked))\n","/usr/local/lib/python3.7/dist-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)\n","  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch: [0]  [  0/175]  eta: 0:31:13  lr: 0.000034  loss: 0.5714 (0.5714)  loss_classifier: 0.5110 (0.5110)  loss_box_reg: 0.0582 (0.0582)  loss_objectness: 0.0012 (0.0012)  loss_rpn_box_reg: 0.0010 (0.0010)  time: 10.7031  data: 4.5545  max mem: 9266\n","Epoch: [0]  [ 10/175]  eta: 0:15:16  lr: 0.000321  loss: 0.5714 (0.6185)  loss_classifier: 0.5110 (0.5455)  loss_box_reg: 0.0636 (0.0664)  loss_objectness: 0.0017 (0.0051)  loss_rpn_box_reg: 0.0015 (0.0015)  time: 5.5555  data: 0.4584  max mem: 9587\n","Epoch: [0]  [ 20/175]  eta: 0:13:48  lr: 0.000608  loss: 0.3869 (0.4571)  loss_classifier: 0.3107 (0.3809)  loss_box_reg: 0.0690 (0.0704)  loss_objectness: 0.0017 (0.0042)  loss_rpn_box_reg: 0.0015 (0.0016)  time: 5.0745  data: 0.0540  max mem: 9587\n","Epoch: [0]  [ 30/175]  eta: 0:12:44  lr: 0.000895  loss: 0.2151 (0.3617)  loss_classifier: 0.1420 (0.2899)  loss_box_reg: 0.0684 (0.0668)  loss_objectness: 0.0016 (0.0034)  loss_rpn_box_reg: 0.0014 (0.0016)  time: 5.1128  data: 0.0611  max mem: 9587\n","Epoch: [0]  [ 40/175]  eta: 0:11:46  lr: 0.001182  loss: 0.1226 (0.2986)  loss_classifier: 0.0609 (0.2311)  loss_box_reg: 0.0537 (0.0632)  loss_objectness: 0.0013 (0.0029)  loss_rpn_box_reg: 0.0012 (0.0015)  time: 5.1158  data: 0.0612  max mem: 9587\n","Epoch: [0]  [ 50/175]  eta: 0:10:51  lr: 0.001469  loss: 0.1001 (0.2593)  loss_classifier: 0.0442 (0.1934)  loss_box_reg: 0.0547 (0.0619)  loss_objectness: 0.0005 (0.0024)  loss_rpn_box_reg: 0.0011 (0.0015)  time: 5.1141  data: 0.0592  max mem: 9612\n","Epoch: [0]  [ 60/175]  eta: 0:09:57  lr: 0.001756  loss: 0.0858 (0.2290)  loss_classifier: 0.0335 (0.1665)  loss_box_reg: 0.0496 (0.0589)  loss_objectness: 0.0003 (0.0021)  loss_rpn_box_reg: 0.0010 (0.0015)  time: 5.1092  data: 0.0593  max mem: 9612\n","Epoch: [0]  [ 70/175]  eta: 0:09:03  lr: 0.002043  loss: 0.0858 (0.2107)  loss_classifier: 0.0309 (0.1482)  loss_box_reg: 0.0491 (0.0592)  loss_objectness: 0.0002 (0.0019)  loss_rpn_box_reg: 0.0011 (0.0014)  time: 5.1032  data: 0.0608  max mem: 9612\n","Epoch: [0]  [ 80/175]  eta: 0:08:11  lr: 0.002330  loss: 0.0748 (0.1929)  loss_classifier: 0.0285 (0.1331)  loss_box_reg: 0.0454 (0.0567)  loss_objectness: 0.0002 (0.0017)  loss_rpn_box_reg: 0.0011 (0.0014)  time: 5.1214  data: 0.0631  max mem: 9612\n","Epoch: [0]  [ 90/175]  eta: 0:07:19  lr: 0.002617  loss: 0.0675 (0.1802)  loss_classifier: 0.0242 (0.1212)  loss_box_reg: 0.0404 (0.0556)  loss_objectness: 0.0001 (0.0019)  loss_rpn_box_reg: 0.0009 (0.0014)  time: 5.1189  data: 0.0620  max mem: 9612\n","Epoch: [0]  [100/175]  eta: 0:06:26  lr: 0.002904  loss: 0.0680 (0.1692)  loss_classifier: 0.0229 (0.1117)  loss_box_reg: 0.0419 (0.0543)  loss_objectness: 0.0003 (0.0018)  loss_rpn_box_reg: 0.0009 (0.0014)  time: 5.0954  data: 0.0598  max mem: 9612\n","Epoch: [0]  [110/175]  eta: 0:05:34  lr: 0.003191  loss: 0.0688 (0.1606)  loss_classifier: 0.0229 (0.1038)  loss_box_reg: 0.0433 (0.0537)  loss_objectness: 0.0003 (0.0017)  loss_rpn_box_reg: 0.0009 (0.0014)  time: 5.0941  data: 0.0605  max mem: 9612\n","Epoch: [0]  [120/175]  eta: 0:04:43  lr: 0.003479  loss: 0.0722 (0.1534)  loss_classifier: 0.0227 (0.0972)  loss_box_reg: 0.0456 (0.0532)  loss_objectness: 0.0002 (0.0016)  loss_rpn_box_reg: 0.0010 (0.0013)  time: 5.0986  data: 0.0596  max mem: 9612\n","Epoch: [0]  [130/175]  eta: 0:03:51  lr: 0.003766  loss: 0.0642 (0.1472)  loss_classifier: 0.0212 (0.0915)  loss_box_reg: 0.0456 (0.0529)  loss_objectness: 0.0001 (0.0015)  loss_rpn_box_reg: 0.0009 (0.0013)  time: 5.1025  data: 0.0592  max mem: 9612\n","Epoch: [0]  [140/175]  eta: 0:02:59  lr: 0.004053  loss: 0.0688 (0.1418)  loss_classifier: 0.0201 (0.0865)  loss_box_reg: 0.0490 (0.0526)  loss_objectness: 0.0002 (0.0015)  loss_rpn_box_reg: 0.0009 (0.0013)  time: 5.1055  data: 0.0601  max mem: 9612\n","Epoch: [0]  [150/175]  eta: 0:02:08  lr: 0.004340  loss: 0.0695 (0.1374)  loss_classifier: 0.0218 (0.0823)  loss_box_reg: 0.0497 (0.0524)  loss_objectness: 0.0002 (0.0014)  loss_rpn_box_reg: 0.0009 (0.0013)  time: 5.1054  data: 0.0601  max mem: 9612\n","Epoch: [0]  [160/175]  eta: 0:01:17  lr: 0.004627  loss: 0.0677 (0.1332)  loss_classifier: 0.0216 (0.0786)  loss_box_reg: 0.0440 (0.0521)  loss_objectness: 0.0002 (0.0013)  loss_rpn_box_reg: 0.0007 (0.0013)  time: 5.3248  data: 0.0607  max mem: 9612\n","Epoch: [0]  [170/175]  eta: 0:00:26  lr: 0.004914  loss: 0.0549 (0.1291)  loss_classifier: 0.0175 (0.0751)  loss_box_reg: 0.0383 (0.0515)  loss_objectness: 0.0001 (0.0013)  loss_rpn_box_reg: 0.0007 (0.0013)  time: 5.7154  data: 0.0599  max mem: 9612\n","Epoch: [0]  [174/175]  eta: 0:00:05  lr: 0.005000  loss: 0.0601 (0.1276)  loss_classifier: 0.0179 (0.0739)  loss_box_reg: 0.0397 (0.0512)  loss_objectness: 0.0001 (0.0013)  loss_rpn_box_reg: 0.0007 (0.0012)  time: 5.6106  data: 0.0572  max mem: 9612\n","Epoch: [0] Total time: 0:15:08 (5.1939 s / it)\n","creating index...\n","index created!\n","Test:  [  0/200]  eta: 0:02:33  model_time: 0.4180 (0.4180)  evaluator_time: 0.0054 (0.0054)  time: 0.7651  data: 0.3380  max mem: 9612\n","Test:  [100/200]  eta: 0:00:33  model_time: 0.3100 (0.3188)  evaluator_time: 0.0022 (0.0030)  time: 0.3255  data: 0.0085  max mem: 9612\n","Test:  [199/200]  eta: 0:00:00  model_time: 0.3129 (0.3161)  evaluator_time: 0.0023 (0.0028)  time: 0.3266  data: 0.0085  max mem: 9612\n","Test: Total time: 0:01:06 (0.3334 s / it)\n","Averaged stats: model_time: 0.3129 (0.3161)  evaluator_time: 0.0023 (0.0028)\n","Accumulating evaluation results...\n","DONE (t=0.05s).\n","IoU metric: bbox\n"," Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.754\n"," Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.998\n"," Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.872\n"," Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.307\n"," Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.757\n"," Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.400\n"," Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.704\n"," Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.816\n"," Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.816\n"," Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.350\n"," Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.819\n"," Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.400\n","Epoch: [1]  [  0/175]  eta: 0:21:11  lr: 0.005000  loss: 0.0499 (0.0499)  loss_classifier: 0.0170 (0.0170)  loss_box_reg: 0.0319 (0.0319)  loss_objectness: 0.0005 (0.0005)  loss_rpn_box_reg: 0.0004 (0.0004)  time: 7.2659  data: 1.3632  max mem: 9612\n","Epoch: [1]  [ 10/175]  eta: 0:16:30  lr: 0.005000  loss: 0.0499 (0.0579)  loss_classifier: 0.0158 (0.0169)  loss_box_reg: 0.0346 (0.0403)  loss_objectness: 0.0001 (0.0001)  loss_rpn_box_reg: 0.0006 (0.0006)  time: 6.0020  data: 0.1651  max mem: 9612\n","Epoch: [1]  [ 20/175]  eta: 0:15:26  lr: 0.005000  loss: 0.0552 (0.0577)  loss_classifier: 0.0154 (0.0169)  loss_box_reg: 0.0394 (0.0399)  loss_objectness: 0.0001 (0.0002)  loss_rpn_box_reg: 0.0007 (0.0007)  time: 5.9154  data: 0.0793  max mem: 9612\n","Epoch: [1]  [ 30/175]  eta: 0:14:23  lr: 0.005000  loss: 0.0596 (0.0583)  loss_classifier: 0.0163 (0.0174)  loss_box_reg: 0.0411 (0.0399)  loss_objectness: 0.0001 (0.0002)  loss_rpn_box_reg: 0.0007 (0.0008)  time: 5.9268  data: 0.0873  max mem: 9612\n","Epoch: [1]  [ 40/175]  eta: 0:13:22  lr: 0.005000  loss: 0.0495 (0.0565)  loss_classifier: 0.0147 (0.0171)  loss_box_reg: 0.0330 (0.0384)  loss_objectness: 0.0000 (0.0002)  loss_rpn_box_reg: 0.0005 (0.0008)  time: 5.9115  data: 0.0631  max mem: 9612\n","Epoch: [1]  [ 50/175]  eta: 0:12:21  lr: 0.005000  loss: 0.0474 (0.0555)  loss_classifier: 0.0137 (0.0167)  loss_box_reg: 0.0319 (0.0378)  loss_objectness: 0.0001 (0.0002)  loss_rpn_box_reg: 0.0005 (0.0008)  time: 5.9082  data: 0.0644  max mem: 9612\n","Epoch: [1]  [ 60/175]  eta: 0:11:21  lr: 0.005000  loss: 0.0554 (0.0573)  loss_classifier: 0.0154 (0.0173)  loss_box_reg: 0.0368 (0.0390)  loss_objectness: 0.0001 (0.0003)  loss_rpn_box_reg: 0.0006 (0.0008)  time: 5.8949  data: 0.0618  max mem: 9612\n","Epoch: [1]  [ 70/175]  eta: 0:10:22  lr: 0.005000  loss: 0.0594 (0.0570)  loss_classifier: 0.0174 (0.0173)  loss_box_reg: 0.0400 (0.0387)  loss_objectness: 0.0001 (0.0002)  loss_rpn_box_reg: 0.0006 (0.0008)  time: 5.8946  data: 0.0608  max mem: 9612\n","Epoch: [1]  [ 80/175]  eta: 0:09:22  lr: 0.005000  loss: 0.0457 (0.0559)  loss_classifier: 0.0142 (0.0168)  loss_box_reg: 0.0346 (0.0380)  loss_objectness: 0.0001 (0.0003)  loss_rpn_box_reg: 0.0006 (0.0008)  time: 5.9021  data: 0.0623  max mem: 9612\n","Epoch: [1]  [ 90/175]  eta: 0:08:23  lr: 0.005000  loss: 0.0448 (0.0557)  loss_classifier: 0.0139 (0.0168)  loss_box_reg: 0.0300 (0.0378)  loss_objectness: 0.0001 (0.0003)  loss_rpn_box_reg: 0.0005 (0.0008)  time: 5.9006  data: 0.0627  max mem: 9612\n","Epoch: [1]  [100/175]  eta: 0:07:23  lr: 0.005000  loss: 0.0485 (0.0550)  loss_classifier: 0.0140 (0.0166)  loss_box_reg: 0.0332 (0.0373)  loss_objectness: 0.0001 (0.0003)  loss_rpn_box_reg: 0.0005 (0.0008)  time: 5.8875  data: 0.0622  max mem: 9612\n","Epoch: [1]  [110/175]  eta: 0:06:24  lr: 0.005000  loss: 0.0485 (0.0552)  loss_classifier: 0.0141 (0.0169)  loss_box_reg: 0.0295 (0.0371)  loss_objectness: 0.0001 (0.0004)  loss_rpn_box_reg: 0.0005 (0.0008)  time: 5.8984  data: 0.0617  max mem: 9612\n","Epoch: [1]  [120/175]  eta: 0:05:25  lr: 0.005000  loss: 0.0507 (0.0547)  loss_classifier: 0.0176 (0.0167)  loss_box_reg: 0.0322 (0.0368)  loss_objectness: 0.0002 (0.0004)  loss_rpn_box_reg: 0.0007 (0.0008)  time: 5.9059  data: 0.0639  max mem: 9612\n","Epoch: [1]  [130/175]  eta: 0:04:26  lr: 0.005000  loss: 0.0507 (0.0548)  loss_classifier: 0.0162 (0.0168)  loss_box_reg: 0.0332 (0.0368)  loss_objectness: 0.0001 (0.0004)  loss_rpn_box_reg: 0.0007 (0.0008)  time: 5.8957  data: 0.0654  max mem: 9612\n","Epoch: [1]  [140/175]  eta: 0:03:26  lr: 0.005000  loss: 0.0501 (0.0546)  loss_classifier: 0.0162 (0.0167)  loss_box_reg: 0.0340 (0.0367)  loss_objectness: 0.0001 (0.0004)  loss_rpn_box_reg: 0.0006 (0.0008)  time: 5.8947  data: 0.0666  max mem: 9612\n","Epoch: [1]  [150/175]  eta: 0:02:27  lr: 0.005000  loss: 0.0518 (0.0549)  loss_classifier: 0.0156 (0.0169)  loss_box_reg: 0.0351 (0.0368)  loss_objectness: 0.0001 (0.0004)  loss_rpn_box_reg: 0.0006 (0.0008)  time: 5.9011  data: 0.0659  max mem: 9612\n","Epoch: [1]  [160/175]  eta: 0:01:28  lr: 0.005000  loss: 0.0542 (0.0550)  loss_classifier: 0.0153 (0.0169)  loss_box_reg: 0.0365 (0.0369)  loss_objectness: 0.0001 (0.0003)  loss_rpn_box_reg: 0.0007 (0.0008)  time: 5.9198  data: 0.0805  max mem: 9612\n","Epoch: [1]  [170/175]  eta: 0:00:29  lr: 0.005000  loss: 0.0464 (0.0546)  loss_classifier: 0.0142 (0.0168)  loss_box_reg: 0.0310 (0.0367)  loss_objectness: 0.0001 (0.0003)  loss_rpn_box_reg: 0.0005 (0.0008)  time: 5.9165  data: 0.0807  max mem: 9612\n","Epoch: [1]  [174/175]  eta: 0:00:05  lr: 0.005000  loss: 0.0449 (0.0542)  loss_classifier: 0.0127 (0.0167)  loss_box_reg: 0.0310 (0.0364)  loss_objectness: 0.0000 (0.0003)  loss_rpn_box_reg: 0.0005 (0.0008)  time: 5.6338  data: 0.0627  max mem: 9612\n","Epoch: [1] Total time: 0:17:09 (5.8823 s / it)\n","creating index...\n","index created!\n","Test:  [  0/200]  eta: 0:02:33  model_time: 0.4294 (0.4294)  evaluator_time: 0.0095 (0.0095)  time: 0.7651  data: 0.3225  max mem: 9612\n","Test:  [100/200]  eta: 0:00:33  model_time: 0.3118 (0.3212)  evaluator_time: 0.0023 (0.0029)  time: 0.3363  data: 0.0094  max mem: 9612\n","Test:  [199/200]  eta: 0:00:00  model_time: 0.3142 (0.3193)  evaluator_time: 0.0023 (0.0029)  time: 0.3268  data: 0.0086  max mem: 9612\n","Test: Total time: 0:01:07 (0.3367 s / it)\n","Averaged stats: model_time: 0.3142 (0.3193)  evaluator_time: 0.0023 (0.0029)\n","Accumulating evaluation results...\n","DONE (t=0.05s).\n","IoU metric: bbox\n"," Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.816\n"," Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.998\n"," Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.970\n"," Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.525\n"," Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.820\n"," Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.500\n"," Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.749\n"," Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.867\n"," Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.867\n"," Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.550\n"," Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.870\n"," Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.500\n","Epoch: [2]  [  0/175]  eta: 0:20:59  lr: 0.005000  loss: 0.0666 (0.0666)  loss_classifier: 0.0171 (0.0171)  loss_box_reg: 0.0480 (0.0480)  loss_objectness: 0.0000 (0.0000)  loss_rpn_box_reg: 0.0014 (0.0014)  time: 7.1951  data: 1.2767  max mem: 9612\n","Epoch: [2]  [ 10/175]  eta: 0:16:28  lr: 0.005000  loss: 0.0612 (0.0528)  loss_classifier: 0.0171 (0.0155)  loss_box_reg: 0.0401 (0.0363)  loss_objectness: 0.0001 (0.0002)  loss_rpn_box_reg: 0.0008 (0.0009)  time: 5.9924  data: 0.1630  max mem: 9612\n","Epoch: [2]  [ 20/175]  eta: 0:15:21  lr: 0.005000  loss: 0.0451 (0.0515)  loss_classifier: 0.0146 (0.0158)  loss_box_reg: 0.0332 (0.0347)  loss_objectness: 0.0001 (0.0003)  loss_rpn_box_reg: 0.0007 (0.0007)  time: 5.8814  data: 0.0574  max mem: 9612\n","Epoch: [2]  [ 30/175]  eta: 0:14:19  lr: 0.005000  loss: 0.0424 (0.0490)  loss_classifier: 0.0126 (0.0150)  loss_box_reg: 0.0293 (0.0331)  loss_objectness: 0.0001 (0.0002)  loss_rpn_box_reg: 0.0004 (0.0007)  time: 5.8951  data: 0.0625  max mem: 9612\n","Epoch: [2]  [ 40/175]  eta: 0:13:19  lr: 0.005000  loss: 0.0424 (0.0478)  loss_classifier: 0.0131 (0.0148)  loss_box_reg: 0.0282 (0.0322)  loss_objectness: 0.0000 (0.0002)  loss_rpn_box_reg: 0.0004 (0.0007)  time: 5.8986  data: 0.0632  max mem: 9612\n","Epoch: [2]  [ 50/175]  eta: 0:12:19  lr: 0.005000  loss: 0.0448 (0.0478)  loss_classifier: 0.0135 (0.0149)  loss_box_reg: 0.0291 (0.0320)  loss_objectness: 0.0001 (0.0002)  loss_rpn_box_reg: 0.0005 (0.0007)  time: 5.8943  data: 0.0644  max mem: 9612\n","Epoch: [2]  [ 60/175]  eta: 0:11:20  lr: 0.005000  loss: 0.0462 (0.0481)  loss_classifier: 0.0134 (0.0149)  loss_box_reg: 0.0318 (0.0324)  loss_objectness: 0.0000 (0.0002)  loss_rpn_box_reg: 0.0004 (0.0006)  time: 5.9085  data: 0.0671  max mem: 9612\n","Epoch: [2]  [ 70/175]  eta: 0:10:21  lr: 0.005000  loss: 0.0460 (0.0481)  loss_classifier: 0.0135 (0.0149)  loss_box_reg: 0.0318 (0.0324)  loss_objectness: 0.0000 (0.0002)  loss_rpn_box_reg: 0.0004 (0.0006)  time: 5.9151  data: 0.0670  max mem: 9612\n","Epoch: [2]  [ 80/175]  eta: 0:09:21  lr: 0.005000  loss: 0.0460 (0.0472)  loss_classifier: 0.0127 (0.0146)  loss_box_reg: 0.0331 (0.0319)  loss_objectness: 0.0000 (0.0002)  loss_rpn_box_reg: 0.0005 (0.0006)  time: 5.8998  data: 0.0641  max mem: 9612\n","Epoch: [2]  [ 90/175]  eta: 0:08:22  lr: 0.005000  loss: 0.0386 (0.0464)  loss_classifier: 0.0124 (0.0143)  loss_box_reg: 0.0266 (0.0314)  loss_objectness: 0.0000 (0.0002)  loss_rpn_box_reg: 0.0005 (0.0006)  time: 5.8940  data: 0.0639  max mem: 9612\n","Epoch: [2]  [100/175]  eta: 0:07:23  lr: 0.005000  loss: 0.0384 (0.0464)  loss_classifier: 0.0127 (0.0143)  loss_box_reg: 0.0264 (0.0313)  loss_objectness: 0.0001 (0.0002)  loss_rpn_box_reg: 0.0005 (0.0006)  time: 5.8961  data: 0.0632  max mem: 9612\n","Epoch: [2]  [110/175]  eta: 0:06:24  lr: 0.005000  loss: 0.0438 (0.0465)  loss_classifier: 0.0137 (0.0143)  loss_box_reg: 0.0273 (0.0314)  loss_objectness: 0.0001 (0.0002)  loss_rpn_box_reg: 0.0005 (0.0006)  time: 5.8962  data: 0.0630  max mem: 9612\n","Epoch: [2]  [120/175]  eta: 0:05:24  lr: 0.005000  loss: 0.0433 (0.0462)  loss_classifier: 0.0130 (0.0142)  loss_box_reg: 0.0263 (0.0312)  loss_objectness: 0.0001 (0.0002)  loss_rpn_box_reg: 0.0004 (0.0007)  time: 5.8925  data: 0.0619  max mem: 9612\n","Epoch: [2]  [130/175]  eta: 0:04:25  lr: 0.005000  loss: 0.0402 (0.0457)  loss_classifier: 0.0126 (0.0141)  loss_box_reg: 0.0263 (0.0308)  loss_objectness: 0.0001 (0.0002)  loss_rpn_box_reg: 0.0004 (0.0007)  time: 5.8962  data: 0.0609  max mem: 9612\n","Epoch: [2]  [140/175]  eta: 0:03:26  lr: 0.005000  loss: 0.0407 (0.0454)  loss_classifier: 0.0121 (0.0140)  loss_box_reg: 0.0268 (0.0306)  loss_objectness: 0.0001 (0.0002)  loss_rpn_box_reg: 0.0004 (0.0006)  time: 5.9089  data: 0.0794  max mem: 9612\n","Epoch: [2]  [150/175]  eta: 0:02:27  lr: 0.005000  loss: 0.0423 (0.0457)  loss_classifier: 0.0126 (0.0140)  loss_box_reg: 0.0282 (0.0308)  loss_objectness: 0.0001 (0.0002)  loss_rpn_box_reg: 0.0005 (0.0006)  time: 5.9339  data: 0.0807  max mem: 9612\n","Epoch: [2]  [160/175]  eta: 0:01:28  lr: 0.005000  loss: 0.0429 (0.0454)  loss_classifier: 0.0126 (0.0139)  loss_box_reg: 0.0309 (0.0307)  loss_objectness: 0.0001 (0.0002)  loss_rpn_box_reg: 0.0005 (0.0006)  time: 5.9196  data: 0.0635  max mem: 9612\n","Epoch: [2]  [170/175]  eta: 0:00:29  lr: 0.005000  loss: 0.0471 (0.0456)  loss_classifier: 0.0130 (0.0140)  loss_box_reg: 0.0317 (0.0308)  loss_objectness: 0.0001 (0.0002)  loss_rpn_box_reg: 0.0005 (0.0006)  time: 5.8861  data: 0.0622  max mem: 9612\n","Epoch: [2]  [174/175]  eta: 0:00:05  lr: 0.005000  loss: 0.0473 (0.0455)  loss_classifier: 0.0133 (0.0139)  loss_box_reg: 0.0328 (0.0307)  loss_objectness: 0.0001 (0.0002)  loss_rpn_box_reg: 0.0005 (0.0006)  time: 5.6246  data: 0.0593  max mem: 9612\n","Epoch: [2] Total time: 0:17:08 (5.8776 s / it)\n","creating index...\n","index created!\n","Test:  [  0/200]  eta: 0:02:21  model_time: 0.4281 (0.4281)  evaluator_time: 0.0056 (0.0056)  time: 0.7065  data: 0.2701  max mem: 9612\n","Test:  [100/200]  eta: 0:00:33  model_time: 0.3116 (0.3192)  evaluator_time: 0.0022 (0.0027)  time: 0.3522  data: 0.0153  max mem: 9612\n","Test:  [199/200]  eta: 0:00:00  model_time: 0.3132 (0.3178)  evaluator_time: 0.0024 (0.0027)  time: 0.3282  data: 0.0087  max mem: 9612\n","Test: Total time: 0:01:06 (0.3348 s / it)\n","Averaged stats: model_time: 0.3132 (0.3178)  evaluator_time: 0.0024 (0.0027)\n","Accumulating evaluation results...\n","DONE (t=0.04s).\n","IoU metric: bbox\n"," Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.795\n"," Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.999\n"," Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.941\n"," Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.550\n"," Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.797\n"," Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.600\n"," Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.733\n"," Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.844\n"," Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.844\n"," Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.550\n"," Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.846\n"," Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.600\n"]}]},{"cell_type":"code","metadata":{"id":"6VtX_3xNgsF0"},"source":["class Takeanimage(torch.utils.data.Dataset):\n","    def __init__(self, root, transforms=None):\n","        self.root = root\n","        self.transforms = transforms\n","        self.imgs = list(sorted(os.listdir(os.path.join(self.root,\"images\"))))\n","\n","    def __getitem__(self, idx):\n","        img_path = os.path.join(self.root, \"images\", self.imgs[idx])\n","        img = Image.open(img_path).convert(\"RGB\")\n","        target={}\n","        if self.transforms is not None:\n","            img, target = self.transforms(img, target)\n","        return img, target"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"oasQEBS6QA9X","colab":{"base_uri":"https://localhost:8080/","height":229},"executionInfo":{"status":"error","timestamp":1636993294478,"user_tz":-60,"elapsed":794,"user":{"displayName":"Carlos Carrion","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06678645044778304547"}},"outputId":"f67ec41c-23eb-4d42-fb28-32df4075bb73"},"source":["# pick one image from the test set\n","import time\n","import cv2\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from google.colab.patches import cv2_imshow\n","\n","picture = Take_test_image(drive_path, get_transform(train=False))\n","for num in range(100):\n","  img, _ = picture[num]\n","  tic = time.perf_counter()\n","  torch.cuda.synchronize()\n","  t0 = time.time()\n","  # put the model in evaluation mode\n","  model.eval()\n","  model\n","  with torch.no_grad():\n","      prediction = model([img.to(device)])\n","  box = prediction[0].get(\"boxes\")\n","  scores=prediction[0].get(\"scores\")\n","  print(scores)\n","  print(box)\n","  labels=(prediction[0].get(\"labels\"))\n","  toc = time.perf_counter()\n","  torch.cuda.synchronize()\n","  elapsed_fp = time.time()-t0\n","  path=os.path.join(drive_path, 'images_test1', 'frame_'+str(num).zfill(6)+'.jpg')\n","  image = cv2.imread(path)\n","\n","  for i in range(len(scores)):\n","    if float(scores[i])>0.30:\n","      x_m=int(box[i,0].item())\n","      y_m=int(box[i,1].item())\n","      x_M=int(box[i,2].item())\n","      y_M=int(box[i,3].item())\n","\n","      pt1 = (x_m,y_m)\n","      print(pt1)\n","      pt2 = (x_M,y_M)\n","      print(pt2)\n","      start_point = (x_m,y_m)\n","        \n","      # Ending coordinate, here (125, 80)\n","      # represents the bottom right corner of rectangle\n","      end_point = (x_M,y_M)\n","        \n","      # Black color in BGR\n","      color = (0, 0, 200)\n","        \n","      # Line thickness of -1 px\n","      # Thickness of -1 will fill the entire shape\n","      thickness = 2\n","        \n","      # Using cv2.rectangle() method\n","      # Draw a rectangle of black color of thickness -1 px\n","      image = cv2.rectangle(image, start_point, end_point, color, thickness)\n","      if(int(labels[i])==1):\n","        image = cv2.putText(image, \"beer\", start_point, 2, 1,(0,255,0), 1);\n","      if(int(labels[i])==2):\n","        image = cv2.putText(image, \"cola\", start_point, 2, 1, (0,255,0), 1);\n","\n","  len(image)\n","\n","  cv2_imshow(image)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-0155ee785895>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatches\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcv2_imshow\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mpicture\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTake_test_image\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdrive_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mget_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mnum\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m   \u001b[0mimg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpicture\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnum\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'Take_test_image' is not defined"]}]},{"cell_type":"code","metadata":{"id":"PCcpWM8JQRd3"},"source":["path=os.path.join(drive_path, 'images_test1', 'frame_'+str(num).zfill(6)+'.jpg')\n","image = cv2.imread(path)\n","\n","for i in range(len(scores)):\n","  if float(scores[i])>0.70:\n","    x_m=int(box[i,0].item())\n","    y_m=int(box[i,1].item())\n","    x_M=int(box[i,2].item())\n","    y_M=int(box[i,3].item())\n","\n","    pt1 = (x_m,y_m)\n","    print(pt1)\n","    pt2 = (x_M,y_M)\n","    print(pt2)\n","    start_point = (x_m,y_m)\n","      \n","    # Ending coordinate, here (125, 80)\n","    # represents the bottom right corner of rectangle\n","    end_point = (x_M,y_M)\n","      \n","    # Black color in BGR\n","    color = (0, 0, 200)\n","      \n","    # Line thickness of -1 px\n","    # Thickness of -1 will fill the entire shape\n","    thickness = 2\n","      \n","    # Using cv2.rectangle() method\n","    # Draw a rectangle of black color of thickness -1 px\n","    image = cv2.rectangle(image, start_point, end_point, color, thickness)\n","    if(int(labels[i])==1):\n","      image = cv2.putText(image, \"beer\", start_point, 2, 1,(0,255,0), 1);\n","    if(int(labels[i])==2):\n","      image = cv2.putText(image, \"cola\", start_point, 2, 1, (0,255,0), 1);\n","\n","len(image)\n","\n","cv2_imshow(image)\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DMO39j1BSxlH"},"source":["# test the quality of the net"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":249},"id":"U7MHo0C9Wsur","executionInfo":{"status":"error","timestamp":1637163917975,"user_tz":-60,"elapsed":254,"user":{"displayName":"Samuele Sermisoni","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13640648701021405346"}},"outputId":"31613dbc-ce0d-4577-be46-ea8ace50084a"},"source":["class Take_test_image(torch.utils.data.Dataset):\n","    def __init__(self, root, transforms=None):\n","        self.root = root\n","        self.transforms = transforms\n","        self.imgs = list(sorted(os.listdir(os.path.join(self.root,\"images_test1\"))))\n","\n","    def __getitem__(self, idx):\n","        img_path = os.path.join(self.root, \"images_test1\", self.imgs[idx])\n","        img = Image.open(img_path).convert(\"RGB\")\n","        target={}\n","        \n","        if self.transforms is not None:\n","            img, target = self.transforms(img, target)\n","        return img, target\n","\n","\n","#model = torch.load(os.path.join(drive_path,\"models/dnn_2.pt\"))\n","#model.load_state_dict(torch.load(os.path.join(drive_path,\"models/dnn_2.pt\")))\n","\n","picture = Take_test_image(drive_path, get_transform(train=False))\n","model.eval()\n","count=0;\n","num_images=len(list(sorted(os.listdir(os.path.join(drive_path,\"images_test1\")))));\n","for i in range(num_images):\n","  img, _ = picture[i]\n","  tree = ET.parse(os.path.join(drive_path,\"frames_test1\", 'frame_'+str(i).zfill(6)+'.xml'))\n","  root = tree.getroot()\n","  label_true=[]\n","  area=0;\n","  for objects in root.findall('object'):\n","    for objects1 in objects.findall('bndbox'):\n","      can_type = objects.find('name').text\n","      if(can_type == 'beer'):\n","        can_type = 1\n","      else:\n","        can_type = 2\n","      label_true.append(can_type)\n","  with torch.no_grad():\n","      prediction = model([img.to(device)])\n","\n","  scores=prediction[0].get(\"scores\")\n","  labels=(prediction[0].get(\"labels\"))\n","  #print(scores)\n","  #print(box)\n","  #print(elapsed_fp)\n","  scores=list(scores)\n","  labels=list(labels)\n","  m=0;\n","  for j in range(len(scores)):\n","    if float(scores[j-m])<0.3:\n","      del scores[j-m]\n","      del labels[j-m]\n","      print(scores)\n","      m+=1\n","  labels.sort()\n","  label_true.sort()\n","  if labels == label_true:\n","    count=count+1\n","print(\"The network correctly classified  \"+str(count/num_images)+\"  of the photos\")\n","  \n","  \n","\n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-e2ea5ead94d2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;31m#model = torch.load(os.path.join(drive_path,\"models/dnn_2.pt\"))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;31m#model.load_state_dict(torch.load(os.path.join(drive_path,\"models/dnn_2.pt\")))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0mpicture\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTake_test_image\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdrive_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mget_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'collections.OrderedDict' object has no attribute 'eval'"]}]},{"cell_type":"code","metadata":{"id":"6cT5T1UyEO5q"},"source":["#trakkerrrr\n","\n","\n","\n","# import the necessary packages\n","from scipy.spatial import distance as dist\n","from collections import OrderedDict\n","import numpy as np\n","\n","class CentroidTracker():\n","\tdef __init__(self, maxDisappeared=5):\n","\t\t# initialize the next unique object ID along with two ordered\n","\t\t# dictionaries used to keep track of mapping a given object\n","\t\t# ID to its centroid and number of consecutive frames it has\n","\t\t# been marked as \"disappeared\", respectively\n","\t\tself.nextObjectID = 0\n","\t\tself.objects = OrderedDict()\n","\t\tself.disappeared = OrderedDict()\n","\n","\t\t# store the number of maximum consecutive frames a given\n","\t\t# object is allowed to be marked as \"disappeared\" until we\n","\t\t# need to deregister the object from tracking\n","\t\tself.maxDisappeared = maxDisappeared\n","\n","\tdef register(self, centroid):\n","\t\t# when registering an object we use the next available object\n","\t\t# ID to store the centroid\n","\t\tself.objects[self.nextObjectID] = centroid\n","\t\tself.disappeared[self.nextObjectID] = 0\n","\t\tself.nextObjectID += 1\n","\n","\tdef deregister(self, objectID):\n","\t\t# to deregister an object ID we delete the object ID from\n","\t\t# both of our respective dictionaries\n","\t\tdel self.objects[objectID]\n","\t\tdel self.disappeared[objectID]\n","\n","\tdef update(self, rects):\n","\t\t# check to see if the list of input bounding box rectangles\n","\t\t# is empty\n","\t\tif len(rects) == 0:\n","\t\t\t# loop over any existing tracked objects and mark them\n","\t\t\t# as disappeared\n","\t\t\tfor objectID in list(self.disappeared.keys()):\n","\t\t\t\tself.disappeared[objectID] += 1\n","\n","\t\t\t\t# if we have reached a maximum number of consecutive\n","\t\t\t\t# frames where a given object has been marked as\n","\t\t\t\t# missing, deregister it\n","\t\t\t\tif self.disappeared[objectID] > self.maxDisappeared:\n","\t\t\t\t\tself.deregister(objectID)\n","\n","\t\t\t# return early as there are no centroids or tracking info\n","\t\t\t# to update\n","\t\t\treturn self.objects\n","\n","\t\t# initialize an array of input centroids for the current frame\n","\t\tinputCentroids = np.zeros((len(rects), 2), dtype=\"int\")\n","\n","\t\t# loop over the bounding box rectangles\n","\t\tfor (i, (startX, startY, endX, endY)) in enumerate(rects):\n","\t\t\t# use the bounding box coordinates to derive the centroid\n","\t\t\tcX = int((startX + endX) / 2.0)\n","\t\t\tcY = int((startY + endY) / 2.0)\n","\t\t\tinputCentroids[i] = (cX, cY)\n","\n","\t\t# if we are currently not tracking any objects take the input\n","\t\t# centroids and register each of them\n","\t\tif len(self.objects) == 0:\n","\t\t\tfor i in range(0, len(inputCentroids)):\n","\t\t\t\tself.register(inputCentroids[i])\n","\n","\t\t# otherwise, are are currently tracking objects so we need to\n","\t\t# try to match the input centroids to existing object\n","\t\t# centroids\n","\t\telse:\n","\t\t\t# grab the set of object IDs and corresponding centroids\n","\t\t\tobjectIDs = list(self.objects.keys())\n","\t\t\tobjectCentroids = list(self.objects.values())\n","\n","\t\t\t# compute the distance between each pair of object\n","\t\t\t# centroids and input centroids, respectively -- our\n","\t\t\t# goal will be to match an input centroid to an existing\n","\t\t\t# object centroid\n","\t\t\tD = dist.cdist(np.array(objectCentroids), inputCentroids)\n","\n","\t\t\t# in order to perform this matching we must (1) find the\n","\t\t\t# smallest value in each row and then (2) sort the row\n","\t\t\t# indexes based on their minimum values so that the row\n","\t\t\t# with the smallest value as at the *front* of the index\n","\t\t\t# list\n","\t\t\trows = D.min(axis=1).argsort()\n","\n","\t\t\t# next, we perform a similar process on the columns by\n","\t\t\t# finding the smallest value in each column and then\n","\t\t\t# sorting using the previously computed row index list\n","\t\t\tcols = D.argmin(axis=1)[rows]\n","\n","\t\t\t# in order to determine if we need to update, register,\n","\t\t\t# or deregister an object we need to keep track of which\n","\t\t\t# of the rows and column indexes we have already examined\n","\t\t\tusedRows = set()\n","\t\t\tusedCols = set()\n","\n","\t\t\t# loop over the combination of the (row, column) index\n","\t\t\t# tuples\n","\t\t\tfor (row, col) in zip(rows, cols):\n","\t\t\t\t# if we have already examined either the row or\n","\t\t\t\t# column value before, ignore it\n","\t\t\t\t# val\n","\t\t\t\tif row in usedRows or col in usedCols:\n","\t\t\t\t\tcontinue\n","\n","\t\t\t\t# otherwise, grab the object ID for the current row,\n","\t\t\t\t# set its new centroid, and reset the disappeared\n","\t\t\t\t# counter\n","\t\t\t\tobjectID = objectIDs[row]\n","\t\t\t\tself.objects[objectID] = inputCentroids[col]\n","\t\t\t\tself.disappeared[objectID] = 0\n","\n","\t\t\t\t# indicate that we have examined each of the row and\n","\t\t\t\t# column indexes, respectively\n","\t\t\t\tusedRows.add(row)\n","\t\t\t\tusedCols.add(col)\n","\n","\t\t\t# compute both the row and column index we have NOT yet\n","\t\t\t# examined\n","\t\t\tunusedRows = set(range(0, D.shape[0])).difference(usedRows)\n","\t\t\tunusedCols = set(range(0, D.shape[1])).difference(usedCols)\n","\n","\t\t\t# in the event that the number of object centroids is\n","\t\t\t# equal or greater than the number of input centroids\n","\t\t\t# we need to check and see if some of these objects have\n","\t\t\t# potentially disappeared\n","\t\t\tif D.shape[0] >= D.shape[1]:\n","\t\t\t\t# loop over the unused row indexes\n","\t\t\t\tfor row in unusedRows:\n","\t\t\t\t\t# grab the object ID for the corresponding row\n","\t\t\t\t\t# index and increment the disappeared counter\n","\t\t\t\t\tobjectID = objectIDs[row]\n","\t\t\t\t\tself.disappeared[objectID] += 1\n","\n","\t\t\t\t\t# check to see if the number of consecutive\n","\t\t\t\t\t# frames the object has been marked \"disappeared\"\n","\t\t\t\t\t# for warrants deregistering the object\n","\t\t\t\t\tif self.disappeared[objectID] > self.maxDisappeared:\n","\t\t\t\t\t\tself.deregister(objectID)\n","\n","\t\t\t# otherwise, if the number of input centroids is greater\n","\t\t\t# than the number of existing object centroids we need to\n","\t\t\t# register each new input centroid as a trackable object\n","\t\t\telse:\n","\t\t\t\tfor col in unusedCols:\n","\t\t\t\t\tself.register(inputCentroids[col])\n","\n","\t\t# return the set of trackable objects\n","\t\treturn self.objects"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from imutils.video import VideoStream\n","import numpy as np\n","import argparse\n","import imutils\n","import time\n","import cv2\n","import os\n","import torch\n","from PIL import Image\n","import xml.etree.ElementTree as ET\n","from google.colab.patches import cv2_imshow\n","\n","\n","\n","class Take_test_image(torch.utils.data.Dataset):\n","    def __init__(self, root, transforms=None):\n","        self.root = root\n","        self.transforms = transforms\n","        self.imgs = list(sorted(os.listdir(os.path.join(self.root,\"images_test\"))))\n","\n","    def __getitem__(self, idx):\n","        img_path = os.path.join(self.root, \"images_test\", self.imgs[idx])\n","        img = Image.open(img_path).convert(\"RGB\")\n","        target={}\n","        \n","        if self.transforms is not None:\n","            img, target = self.transforms(img, target)\n","        return img, target\n","\n","    def __len__(self):\n","        return len(self.imgs)\n","\n","ct = CentroidTracker()\n","picture = Take_test_image(drive_path, get_transform(train=False))\n","num_images=len(picture)\n","model.eval()\n","\n","for i in range(num_images):\n","\n","  path=os.path.join(drive_path, 'images_test', 'frame_'+str(i).zfill(6)+'.jpg')\n","  frame = cv2.imread(path)\n","\n","  img, _ = picture[i]\n","  with torch.no_grad():\n","    detection = model([img.to(device)])\n","\n","  box1 = detection[0].get(\"boxes\")\n","  scores = detection[0].get(\"scores\")\n","  scores=list(scores)\n","  box1=list(box1)\n","  rects=[]\n","\t# loop over the detections\n","  for j in range(len(scores)):\n","    # filter out weak detections by ensuring the predicted\n","    # probability is greater than a minimum threshold\n","    if scores[j] > 0.5:\n","      # compute the (x, y)-coordinates of the bounding box for\n","\t\t\t# the object, then update the bounding box rectangles list\n","      \n","      box = np.array(box1[j].cpu())\n","\n","      rects.append(box.astype(\"int\"))\n","      \n","\t\t\t# draw a bounding box surrounding the object so we can\n","\t\t\t# visualize it\n","      (startX, startY, endX, endY) = box.astype(\"int\")\n","      cv2.rectangle(frame, (startX, startY), (endX, endY),(0, 255, 0), 2)\n","\t# update our centroid tracker using the computed set of bounding\n","\t# box rectangles\n","  objects = ct.update(rects)\n","\t# loop over the tracked objects\n","  for (objectID, centroid) in objects.items():\n","   \t# draw both the ID of the object and the centroid of the\n","\t\t# object on the output frame\n","    text = \"ID {}\".format(objectID)\n","    cv2.putText(frame, text, (centroid[0] - 10, centroid[1] - 10),\n","    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)\n","    cv2.circle(frame, (centroid[0], centroid[1]), 4, (0, 255, 0), -1)\n","\n","\t# show the output frame\n","  cv2_imshow(frame)\n","  key = cv2.waitKey(1) & 0xFF\n","\n","\t# if the `q` key was pressed, break from the loop\n","  if key == ord(\"q\"):\n","   break\n","\n","# do a bit of cleanup\n","cv2.destroyAllWindows()\n","vs.stop()"],"metadata":{"id":"mVfBjmTNC37f"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"oa05UcLjcCYg"},"source":["torch.save(model, drive_path+'/models')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JNdJpoVVcfGs"},"source":["model = torch.load(drive_path+'/models')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6oeRH2Hvc5D9","executionInfo":{"status":"ok","timestamp":1636994105785,"user_tz":-60,"elapsed":386,"user":{"displayName":"Carlos Carrion","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06678645044778304547"}},"outputId":"48fa614a-bdf7-44d5-c7a5-f1af4df6cea3"},"source":[""],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["FasterRCNN(\n","  (transform): GeneralizedRCNNTransform(\n","      Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n","      Resize(min_size=(800,), max_size=1333, mode='bilinear')\n","  )\n","  (backbone): BackboneWithFPN(\n","    (body): IntermediateLayerGetter(\n","      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n","      (bn1): FrozenBatchNorm2d(64, eps=0.0)\n","      (relu): ReLU(inplace=True)\n","      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","      (layer1): Sequential(\n","        (0): Bottleneck(\n","          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn1): FrozenBatchNorm2d(64, eps=0.0)\n","          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","          (bn2): FrozenBatchNorm2d(64, eps=0.0)\n","          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn3): FrozenBatchNorm2d(256, eps=0.0)\n","          (relu): ReLU(inplace=True)\n","          (downsample): Sequential(\n","            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","            (1): FrozenBatchNorm2d(256, eps=0.0)\n","          )\n","        )\n","        (1): Bottleneck(\n","          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn1): FrozenBatchNorm2d(64, eps=0.0)\n","          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","          (bn2): FrozenBatchNorm2d(64, eps=0.0)\n","          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn3): FrozenBatchNorm2d(256, eps=0.0)\n","          (relu): ReLU(inplace=True)\n","        )\n","        (2): Bottleneck(\n","          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn1): FrozenBatchNorm2d(64, eps=0.0)\n","          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","          (bn2): FrozenBatchNorm2d(64, eps=0.0)\n","          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn3): FrozenBatchNorm2d(256, eps=0.0)\n","          (relu): ReLU(inplace=True)\n","        )\n","      )\n","      (layer2): Sequential(\n","        (0): Bottleneck(\n","          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn1): FrozenBatchNorm2d(128, eps=0.0)\n","          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","          (bn2): FrozenBatchNorm2d(128, eps=0.0)\n","          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn3): FrozenBatchNorm2d(512, eps=0.0)\n","          (relu): ReLU(inplace=True)\n","          (downsample): Sequential(\n","            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","            (1): FrozenBatchNorm2d(512, eps=0.0)\n","          )\n","        )\n","        (1): Bottleneck(\n","          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn1): FrozenBatchNorm2d(128, eps=0.0)\n","          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","          (bn2): FrozenBatchNorm2d(128, eps=0.0)\n","          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn3): FrozenBatchNorm2d(512, eps=0.0)\n","          (relu): ReLU(inplace=True)\n","        )\n","        (2): Bottleneck(\n","          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn1): FrozenBatchNorm2d(128, eps=0.0)\n","          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","          (bn2): FrozenBatchNorm2d(128, eps=0.0)\n","          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn3): FrozenBatchNorm2d(512, eps=0.0)\n","          (relu): ReLU(inplace=True)\n","        )\n","        (3): Bottleneck(\n","          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn1): FrozenBatchNorm2d(128, eps=0.0)\n","          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","          (bn2): FrozenBatchNorm2d(128, eps=0.0)\n","          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn3): FrozenBatchNorm2d(512, eps=0.0)\n","          (relu): ReLU(inplace=True)\n","        )\n","      )\n","      (layer3): Sequential(\n","        (0): Bottleneck(\n","          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn1): FrozenBatchNorm2d(256, eps=0.0)\n","          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","          (bn2): FrozenBatchNorm2d(256, eps=0.0)\n","          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn3): FrozenBatchNorm2d(1024, eps=0.0)\n","          (relu): ReLU(inplace=True)\n","          (downsample): Sequential(\n","            (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","            (1): FrozenBatchNorm2d(1024, eps=0.0)\n","          )\n","        )\n","        (1): Bottleneck(\n","          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn1): FrozenBatchNorm2d(256, eps=0.0)\n","          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","          (bn2): FrozenBatchNorm2d(256, eps=0.0)\n","          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn3): FrozenBatchNorm2d(1024, eps=0.0)\n","          (relu): ReLU(inplace=True)\n","        )\n","        (2): Bottleneck(\n","          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn1): FrozenBatchNorm2d(256, eps=0.0)\n","          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","          (bn2): FrozenBatchNorm2d(256, eps=0.0)\n","          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn3): FrozenBatchNorm2d(1024, eps=0.0)\n","          (relu): ReLU(inplace=True)\n","        )\n","        (3): Bottleneck(\n","          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn1): FrozenBatchNorm2d(256, eps=0.0)\n","          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","          (bn2): FrozenBatchNorm2d(256, eps=0.0)\n","          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn3): FrozenBatchNorm2d(1024, eps=0.0)\n","          (relu): ReLU(inplace=True)\n","        )\n","        (4): Bottleneck(\n","          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn1): FrozenBatchNorm2d(256, eps=0.0)\n","          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","          (bn2): FrozenBatchNorm2d(256, eps=0.0)\n","          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn3): FrozenBatchNorm2d(1024, eps=0.0)\n","          (relu): ReLU(inplace=True)\n","        )\n","        (5): Bottleneck(\n","          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn1): FrozenBatchNorm2d(256, eps=0.0)\n","          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","          (bn2): FrozenBatchNorm2d(256, eps=0.0)\n","          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn3): FrozenBatchNorm2d(1024, eps=0.0)\n","          (relu): ReLU(inplace=True)\n","        )\n","      )\n","      (layer4): Sequential(\n","        (0): Bottleneck(\n","          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn1): FrozenBatchNorm2d(512, eps=0.0)\n","          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","          (bn2): FrozenBatchNorm2d(512, eps=0.0)\n","          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn3): FrozenBatchNorm2d(2048, eps=0.0)\n","          (relu): ReLU(inplace=True)\n","          (downsample): Sequential(\n","            (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","            (1): FrozenBatchNorm2d(2048, eps=0.0)\n","          )\n","        )\n","        (1): Bottleneck(\n","          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn1): FrozenBatchNorm2d(512, eps=0.0)\n","          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","          (bn2): FrozenBatchNorm2d(512, eps=0.0)\n","          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn3): FrozenBatchNorm2d(2048, eps=0.0)\n","          (relu): ReLU(inplace=True)\n","        )\n","        (2): Bottleneck(\n","          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn1): FrozenBatchNorm2d(512, eps=0.0)\n","          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","          (bn2): FrozenBatchNorm2d(512, eps=0.0)\n","          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","          (bn3): FrozenBatchNorm2d(2048, eps=0.0)\n","          (relu): ReLU(inplace=True)\n","        )\n","      )\n","    )\n","    (fpn): FeaturePyramidNetwork(\n","      (inner_blocks): ModuleList(\n","        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))\n","        (1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))\n","        (2): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n","        (3): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))\n","      )\n","      (layer_blocks): ModuleList(\n","        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      )\n","      (extra_blocks): LastLevelMaxPool()\n","    )\n","  )\n","  (rpn): RegionProposalNetwork(\n","    (anchor_generator): AnchorGenerator()\n","    (head): RPNHead(\n","      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","      (cls_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))\n","      (bbox_pred): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))\n","    )\n","  )\n","  (roi_heads): RoIHeads(\n","    (box_roi_pool): MultiScaleRoIAlign(featmap_names=['0', '1', '2', '3'], output_size=(7, 7), sampling_ratio=2)\n","    (box_head): TwoMLPHead(\n","      (fc6): Linear(in_features=12544, out_features=1024, bias=True)\n","      (fc7): Linear(in_features=1024, out_features=1024, bias=True)\n","    )\n","    (box_predictor): FastRCNNPredictor(\n","      (cls_score): Linear(in_features=1024, out_features=91, bias=True)\n","      (bbox_pred): Linear(in_features=1024, out_features=364, bias=True)\n","    )\n","  )\n",")"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","metadata":{"id":"bkbuGDz5c6zP"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cT6jpaempumw","executionInfo":{"status":"ok","timestamp":1638013912757,"user_tz":-60,"elapsed":3547,"user":{"displayName":"Samuele Sermisoni","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13640648701021405346"}},"outputId":"05faa5b1-eb0e-4ac0-ca17-8b44b474a410"},"source":["%%shell\n","git clone https://github.com/ultralytics/yolov5\n","pip install -r yolov5/requirements.txt"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["fatal: destination path 'yolov5' already exists and is not an empty directory.\n","Requirement already satisfied: matplotlib>=3.2.2 in /usr/local/lib/python3.7/dist-packages (from -r yolov5/requirements.txt (line 4)) (3.2.2)\n","Requirement already satisfied: numpy>=1.18.5 in /usr/local/lib/python3.7/dist-packages (from -r yolov5/requirements.txt (line 5)) (1.19.5)\n","Requirement already satisfied: opencv-python>=4.1.2 in /usr/local/lib/python3.7/dist-packages (from -r yolov5/requirements.txt (line 6)) (4.1.2.30)\n","Requirement already satisfied: Pillow>=7.1.2 in /usr/local/lib/python3.7/dist-packages (from -r yolov5/requirements.txt (line 7)) (7.1.2)\n","Requirement already satisfied: PyYAML>=5.3.1 in /usr/local/lib/python3.7/dist-packages (from -r yolov5/requirements.txt (line 8)) (6.0)\n","Requirement already satisfied: requests>=2.23.0 in /usr/local/lib/python3.7/dist-packages (from -r yolov5/requirements.txt (line 9)) (2.23.0)\n","Requirement already satisfied: scipy>=1.4.1 in /usr/local/lib/python3.7/dist-packages (from -r yolov5/requirements.txt (line 10)) (1.4.1)\n","Requirement already satisfied: torch>=1.7.0 in /usr/local/lib/python3.7/dist-packages (from -r yolov5/requirements.txt (line 11)) (1.10.0+cu111)\n","Requirement already satisfied: torchvision>=0.8.1 in /usr/local/lib/python3.7/dist-packages (from -r yolov5/requirements.txt (line 12)) (0.11.1+cu111)\n","Requirement already satisfied: tqdm>=4.41.0 in /usr/local/lib/python3.7/dist-packages (from -r yolov5/requirements.txt (line 13)) (4.62.3)\n","Requirement already satisfied: tensorboard>=2.4.1 in /usr/local/lib/python3.7/dist-packages (from -r yolov5/requirements.txt (line 16)) (2.7.0)\n","Requirement already satisfied: pandas>=1.1.4 in /usr/local/lib/python3.7/dist-packages (from -r yolov5/requirements.txt (line 20)) (1.1.5)\n","Requirement already satisfied: seaborn>=0.11.0 in /usr/local/lib/python3.7/dist-packages (from -r yolov5/requirements.txt (line 21)) (0.11.2)\n","Requirement already satisfied: thop in /usr/local/lib/python3.7/dist-packages (from -r yolov5/requirements.txt (line 36)) (0.0.31.post2005241907)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=3.2.2->-r yolov5/requirements.txt (line 4)) (0.11.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=3.2.2->-r yolov5/requirements.txt (line 4)) (3.0.6)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=3.2.2->-r yolov5/requirements.txt (line 4)) (2.8.2)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=3.2.2->-r yolov5/requirements.txt (line 4)) (1.3.2)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.23.0->-r yolov5/requirements.txt (line 9)) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.23.0->-r yolov5/requirements.txt (line 9)) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.23.0->-r yolov5/requirements.txt (line 9)) (3.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.23.0->-r yolov5/requirements.txt (line 9)) (2021.10.8)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch>=1.7.0->-r yolov5/requirements.txt (line 11)) (3.10.0.2)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (1.0.1)\n","Requirement already satisfied: absl-py>=0.4 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (0.12.0)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (1.35.0)\n","Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (0.6.1)\n","Requirement already satisfied: grpcio>=1.24.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (1.42.0)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (1.8.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (3.3.6)\n","Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (0.37.0)\n","Requirement already satisfied: protobuf>=3.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (3.17.3)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (0.4.6)\n","Requirement already satisfied: setuptools>=41.0.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (57.4.0)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=1.1.4->-r yolov5/requirements.txt (line 20)) (2018.9)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from absl-py>=0.4->tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (1.15.0)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (0.2.8)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (4.7.2)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<3,>=1.6.3->tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (4.2.4)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (1.3.0)\n","Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (4.8.2)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (3.6.0)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (0.4.8)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard>=2.4.1->-r yolov5/requirements.txt (line 16)) (3.1.1)\n"]},{"output_type":"execute_result","data":{"text/plain":[""]},"metadata":{},"execution_count":98}]},{"cell_type":"code","metadata":{"id":"ius9U5V6p_5d"},"source":["import torch\n","from IPython.display import Image  # for displaying images\n","import os \n","import random\n","import shutil\n","from sklearn.model_selection import train_test_split\n","import xml.etree.ElementTree as ET\n","from xml.dom import minidom\n","from tqdm import tqdm\n","from PIL import Image, ImageDraw\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","random.seed(108)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VQqrCD8PqZ4U"},"source":["# Function to get the data from XML Annotation\n","def extract_info_from_xml(xml_file):\n","\n","    # Initialise the info dict \n","    info_dict = {}\n","    info_dict['bboxes'] = []\n","\n","    tree = ET.parse(os.path.join(xml_file))\n","    root = tree.getroot()\n","\n","    boxes = []\n","    label=[]\n","    for objects in root.findall('object'):\n","      for objects1 in objects.findall('bndbox'):\n","        bbox = {}\n","        bbox[\"class\"] = objects.find('name').text\n","        bbox[\"xmin\"]= float(objects1.find('xmin').text)\n","        bbox[\"ymin\"]= float(objects1.find('ymin').text)\n","        bbox[\"xmax\"]= float(objects1.find('xmax').text)\n","        bbox[\"ymax\"]= float(objects1.find('ymax').text)\n","        info_dict['bboxes'].append(bbox)\n","    info_dict['image_size'] = tuple((640,480,3))\n","    info_dict['filename'] =xml_file[-16:]\n","    #print(xml_file[-16:])\n","\n","    return info_dict"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"69fMtzltq2sv","executionInfo":{"status":"ok","timestamp":1638006469733,"user_tz":-60,"elapsed":210,"user":{"displayName":"Samuele Sermisoni","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13640648701021405346"}},"outputId":"3f52e5b5-7ecf-4010-f601-2a317fc9bc6e"},"source":["idx=5;\n","print(extract_info_from_xml(os.path.join(drive_path, 'frames_giusti', 'frame_'+str(idx).zfill(6)+'.xml')))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'bboxes': [{'class': 'beer', 'xmin': 96.01, 'ymin': 74.7, 'xmax': 160.96, 'ymax': 159.45}], 'image_size': (640, 480, 3), 'filename': 'frame_000005.xml'}\n"]}]},{"cell_type":"code","metadata":{"id":"Dh9jw7NhQcHC"},"source":["# Dictionary that maps class names to IDs\n","class_name_to_id_mapping = {\"beer\": 0,\n","                           \"coke\": 1,\n","                            \"cola\": 1}\n","\n","# Convert the info dict to the required yolo format and write it to disk\n","def convert_to_yolov5(info_dict):\n","    print_buffer = []\n","    \n","    # For each bounding box\n","    for b in info_dict[\"bboxes\"]:\n","        try:\n","            class_id = class_name_to_id_mapping[b[\"class\"]]\n","        except KeyError:\n","            print(\"Invalid Class. Must be one from \", class_name_to_id_mapping.keys())\n","        \n","        # Transform the bbox co-ordinates as per the format required by YOLO v5\n","        b_center_x = (b[\"xmin\"] + b[\"xmax\"]) / 2 \n","        b_center_y = (b[\"ymin\"] + b[\"ymax\"]) / 2\n","        b_width    = (b[\"xmax\"] - b[\"xmin\"])\n","        b_height   = (b[\"ymax\"] - b[\"ymin\"])\n","        \n","        # Normalise the co-ordinates by the dimensions of the image\n","        image_w, image_h, image_c = info_dict[\"image_size\"]  \n","        b_center_x /= image_w \n","        b_center_y /= image_h \n","        b_width    /= image_w \n","        b_height   /= image_h \n","        \n","        #Write the bbox details to the file \n","        print_buffer.append(\"{} {:.3f} {:.3f} {:.3f} {:.3f}\".format(class_id, b_center_x, b_center_y, b_width, b_height))\n","        \n","    # Name of the file which we have to save \n","    save_file_name = os.path.join(drive_path, \"frames_yolo\", info_dict[\"filename\"].replace(\"xml\", \"txt\"))\n","    \n","    # Save the annotation to disk\n","    #file= open(save_file_name, \"w\")\n","    #file.write(\"\\n\".join(print_buffer))\n","    print(\"\\n\".join(print_buffer), file= open(save_file_name, \"w\") )\n","    #file.close()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rHjxm0N_RePx","executionInfo":{"status":"ok","timestamp":1638010542875,"user_tz":-60,"elapsed":14583,"user":{"displayName":"Samuele Sermisoni","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13640648701021405346"}},"outputId":"d6660f70-53af-4680-fd47-dcc73fe97f8b"},"source":["# Get the annotations\n","annotations = [os.path.join(drive_path, 'frames_giusti', x) for x in os.listdir(os.path.join(drive_path, 'frames_giusti')) if x[-3:] == \"xml\"]\n","annotations.sort()\n","\n","# Convert and save the annotations\n","for ann in tqdm(annotations):\n","    info_dict = extract_info_from_xml(ann)\n","    convert_to_yolov5(info_dict)\n","annotations = [os.path.join(drive_path, \"frames_yolo\", x) for x in os.listdir(os.path.join(drive_path, \"frames_yolo\")) if x[-3:] == \"txt\"]"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 1608/1608 [00:14<00:00, 111.27it/s]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":306},"id":"aXCtvjLXar5J","executionInfo":{"status":"ok","timestamp":1638010703079,"user_tz":-60,"elapsed":1141,"user":{"displayName":"Samuele Sermisoni","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13640648701021405346"}},"outputId":"5249cb80-8894-489a-f6ab-39cd392f949f"},"source":["random.seed(7)\n","\n","class_id_to_name_mapping = dict(zip(class_name_to_id_mapping.values(), class_name_to_id_mapping.keys()))\n","\n","def plot_bounding_box(image, annotation_list):\n","    annotations = np.array(annotation_list)\n","    w, h = image.size\n","    \n","    plotted_image = ImageDraw.Draw(image)\n","\n","    transformed_annotations = np.copy(annotations)\n","    transformed_annotations[:,[1,3]] = annotations[:,[1,3]] * w\n","    transformed_annotations[:,[2,4]] = annotations[:,[2,4]] * h \n","    \n","    transformed_annotations[:,1] = transformed_annotations[:,1] - (transformed_annotations[:,3] / 2)\n","    transformed_annotations[:,2] = transformed_annotations[:,2] - (transformed_annotations[:,4] / 2)\n","    transformed_annotations[:,3] = transformed_annotations[:,1] + transformed_annotations[:,3]\n","    transformed_annotations[:,4] = transformed_annotations[:,2] + transformed_annotations[:,4]\n","    \n","    for ann in transformed_annotations:\n","        obj_cls, x0, y0, x1, y1 = ann\n","        plotted_image.rectangle(((x0,y0), (x1,y1)))\n","        \n","        plotted_image.text((x0, y0 - 10), class_id_to_name_mapping[(int(obj_cls))])\n","    \n","    plt.imshow(np.array(image))\n","    plt.show()\n","\n","# Get any random annotation file \n","annotation_file = random.choice(annotations)\n","print(annotation_file)\n","with open(annotation_file, \"r\") as file:\n","    annotation_list = file.read().split(\"\\n\")[:-1]\n","    annotation_list = [x.split(\" \") for x in annotation_list]\n","    annotation_list = [[float(y) for y in x ] for x in annotation_list]\n","\n","#Get the corresponding image file\n","#image_file=os.path.join(drive_path, 'images_test1', 'frame_'+str(num).zfill(6)+'.jpg')\n","#image_file = os.path.join(drive_path, 'images_giusti', (annotation_file.replace(drive_path,\"\").replace(\"/frames_yolov5\",\"\").replace(\"txt\", \"jpg\")))\n","image_file = os.path.join(drive_path, 'images_giusti',annotation_file[-16:].replace(\"txt\",\"jpg\"))\n","print(image_file)\n","assert os.path.exists(image_file)\n","\n","#Load the image\n","image = Image.open(image_file)\n","\n","#Plot the Bounding Box\n","plot_bounding_box(image, annotation_list)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["drive/My Drive/frames_yolo/frame_000664.txt\n","drive/My Drive/images_giusti/frame_000664.jpg\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IFQw0_GtJNjt","executionInfo":{"status":"ok","timestamp":1638012968299,"user_tz":-60,"elapsed":284,"user":{"displayName":"Samuele Sermisoni","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13640648701021405346"}},"outputId":"a1d3d5a5-0cbf-4b6f-f454-94c57e1c82ff"},"source":["# Read images and annotations\n","images = [os.path.join(drive_path, 'images_giusti', x) for x in os.listdir(os.path.join(drive_path, 'images_giusti'))][:-1]\n","annotations = [os.path.join(drive_path, \"frames_yolo\", x) for x in os.listdir(os.path.join(drive_path,\"frames_yolo\")) if x[-3:] == \"txt\"]\n","\n","print(len(images[:-1]))\n","print(len(annotations))\n","\n","images.sort()\n","annotations.sort()\n","\n","# Split the dataset into train-valid-test splits \n","train_images, val_images, train_annotations, val_annotations = train_test_split(images, annotations, test_size = 0.2, random_state = 1)\n","val_images, test_images, val_annotations, test_annotations = train_test_split(val_images, val_annotations, test_size = 0.5, random_state = 1)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1607\n","1608\n"]}]},{"cell_type":"code","metadata":{"id":"Ud9IV489MY_i"},"source":["def move_files_to_folder(list_of_files, destination_folder):\n","    for f in list_of_files:\n","        try:\n","            shutil.move(f, destination_folder)\n","        except:\n","            print(f)\n","            assert False\n","\n","# Move the splits into their folders\n","move_files_to_folder(train_images,os.path.join(drive_path, 'yolo',\"images\",\"train\"))\n","move_files_to_folder(val_images, os.path.join(drive_path, 'yolo',\"images\",\"val\"))\n","move_files_to_folder(test_images, os.path.join(drive_path, 'yolo',\"images\",\"test\"))\n","move_files_to_folder(train_annotations, os.path.join(drive_path, 'yolo',\"labels\",\"train\"))\n","move_files_to_folder(val_annotations, os.path.join(drive_path, 'yolo',\"labels\",\"val\"))\n","move_files_to_folder(test_annotations, os.path.join(drive_path, 'yolo',\"labels\",\"test\"))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eJx_8aquPFLw","executionInfo":{"status":"ok","timestamp":1638014705493,"user_tz":-60,"elapsed":302,"user":{"displayName":"Samuele Sermisoni","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13640648701021405346"}},"outputId":"61bb9b59-c6b5-4523-cf2e-723615a04383"},"source":["%cd ..\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/yolov5\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wWk7S65KSD7j","outputId":"ae25cd46-93a7-4dbe-f5aa-ef1ce02d07d3"},"source":["!python train.py --img 640 --cfg yolov5s.yaml --hyp hyp.scratch.yaml --batch 32 --epochs 100 --data coco128.yaml --weights yolov5s.pt --workers 24 --name yolo_road_det"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[34m\u001b[1mtrain: \u001b[0mweights=yolov5s.pt, cfg=yolov5s.yaml, data=coco128.yaml, hyp=hyp.scratch.yaml, epochs=100, batch_size=32, imgsz=640, rect=False, resume=False, nosave=False, noval=False, noautoanchor=False, evolve=None, bucket=, cache=None, image_weights=False, device=, multi_scale=False, single_cls=False, adam=False, sync_bn=False, workers=24, project=runs/train, name=yolo_road_det, exist_ok=False, quad=False, linear_lr=False, label_smoothing=0.0, patience=100, freeze=0, save_period=-1, local_rank=-1, entity=None, upload_dataset=False, bbox_interval=-1, artifact_alias=latest\n","remote: Enumerating objects: 6, done.\u001b[K\n","remote: Counting objects: 100% (5/5), done.\u001b[K\n","remote: Total 6 (delta 5), reused 5 (delta 5), pack-reused 1\u001b[K\n","Unpacking objects: 100% (6/6), done.\n","From https://github.com/ultralytics/yolov5\n","   7c6bae0..fcd180d  master     -> origin/master\n","\u001b[34m\u001b[1mgithub: \u001b[0m⚠️ YOLOv5 is out of date by 1 commit. Use `git pull` or `git clone https://github.com/ultralytics/yolov5` to update.\n","YOLOv5 🚀 v6.0-109-g7c6bae0 torch 1.10.0+cu111 CUDA:0 (Tesla K80, 11441MiB)\n","\n","\u001b[34m\u001b[1mhyperparameters: \u001b[0mlr0=0.01, lrf=0.1, momentum=0.937, weight_decay=0.0005, warmup_epochs=3.0, warmup_momentum=0.8, warmup_bias_lr=0.1, box=0.05, cls=0.5, cls_pw=1.0, obj=1.0, obj_pw=1.0, iou_t=0.2, anchor_t=4.0, fl_gamma=0.0, hsv_h=0.015, hsv_s=0.7, hsv_v=0.4, degrees=0.0, translate=0.1, scale=0.5, shear=0.0, perspective=0.0, flipud=0.0, fliplr=0.5, mosaic=1.0, mixup=0.0, copy_paste=0.0\n","\u001b[34m\u001b[1mWeights & Biases: \u001b[0mrun 'pip install wandb' to automatically track and visualize YOLOv5 🚀 runs (RECOMMENDED)\n","\u001b[34m\u001b[1mTensorBoard: \u001b[0mStart with 'tensorboard --logdir runs/train', view at http://localhost:6006/\n","Downloading https://github.com/ultralytics/yolov5/releases/download/v6.0/yolov5s.pt to yolov5s.pt...\n","100% 14.0M/14.0M [00:00<00:00, 100MB/s] \n","\n","Overriding model.yaml nc=80 with nc=2\n","\n","                 from  n    params  module                                  arguments                     \n","  0                -1  1      3520  models.common.Conv                      [3, 32, 6, 2, 2]              \n","  1                -1  1     18560  models.common.Conv                      [32, 64, 3, 2]                \n","  2                -1  1     18816  models.common.C3                        [64, 64, 1]                   \n","  3                -1  1     73984  models.common.Conv                      [64, 128, 3, 2]               \n","  4                -1  2    115712  models.common.C3                        [128, 128, 2]                 \n","  5                -1  1    295424  models.common.Conv                      [128, 256, 3, 2]              \n","  6                -1  3    625152  models.common.C3                        [256, 256, 3]                 \n","  7                -1  1   1180672  models.common.Conv                      [256, 512, 3, 2]              \n","  8                -1  1   1182720  models.common.C3                        [512, 512, 1]                 \n","  9                -1  1    656896  models.common.SPPF                      [512, 512, 5]                 \n"," 10                -1  1    131584  models.common.Conv                      [512, 256, 1, 1]              \n"," 11                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']          \n"," 12           [-1, 6]  1         0  models.common.Concat                    [1]                           \n"," 13                -1  1    361984  models.common.C3                        [512, 256, 1, False]          \n"," 14                -1  1     33024  models.common.Conv                      [256, 128, 1, 1]              \n"," 15                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']          \n"," 16           [-1, 4]  1         0  models.common.Concat                    [1]                           \n"," 17                -1  1     90880  models.common.C3                        [256, 128, 1, False]          \n"," 18                -1  1    147712  models.common.Conv                      [128, 128, 3, 2]              \n"," 19          [-1, 14]  1         0  models.common.Concat                    [1]                           \n"," 20                -1  1    296448  models.common.C3                        [256, 256, 1, False]          \n"," 21                -1  1    590336  models.common.Conv                      [256, 256, 3, 2]              \n"," 22          [-1, 10]  1         0  models.common.Concat                    [1]                           \n"," 23                -1  1   1182720  models.common.C3                        [512, 512, 1, False]          \n"," 24      [17, 20, 23]  1     18879  models.yolo.Detect                      [2, [[10, 13, 16, 30, 33, 23], [30, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]], [128, 256, 512]]\n","Model Summary: 270 layers, 7025023 parameters, 7025023 gradients, 15.9 GFLOPs\n","\n","Transferred 342/349 items from yolov5s.pt\n","Scaled weight_decay = 0.0005\n","\u001b[34m\u001b[1moptimizer:\u001b[0m SGD with parameter groups 57 weight, 60 weight (no decay), 60 bias\n","\u001b[34m\u001b[1malbumentations: \u001b[0mversion 1.0.3 required by YOLOv5, but version 0.1.12 is currently installed\n","\u001b[34m\u001b[1mtrain: \u001b[0mScanning '../drive/My Drive/yolo/labels/train' images and labels...1208 found, 78 missing, 0 empty, 0 corrupted: 100% 1286/1286 [04:57<00:00,  4.33it/s]\n","\u001b[34m\u001b[1mtrain: \u001b[0mWARNING: ../drive/My Drive/yolo/images/train/frame_001233.jpg: 1 duplicate labels removed\n","\u001b[34m\u001b[1mtrain: \u001b[0mWARNING: ../drive/My Drive/yolo/images/train/frame_001234.jpg: 2 duplicate labels removed\n","\u001b[34m\u001b[1mtrain: \u001b[0mNew cache created: ../drive/My Drive/yolo/labels/train.cache\n","\u001b[34m\u001b[1mval: \u001b[0mScanning '../drive/My Drive/yolo/labels/val' images and labels...116 found, 45 missing, 0 empty, 0 corrupted: 100% 161/161 [00:34<00:00,  4.66it/s]\n","\u001b[34m\u001b[1mval: \u001b[0mNew cache created: ../drive/My Drive/yolo/labels/val.cache\n","Plotting labels to runs/train/yolo_road_det/labels.jpg... \n","\n","\u001b[34m\u001b[1mAutoAnchor: \u001b[0m5.92 anchors/target, 1.000 Best Possible Recall (BPR). Current anchors are a good fit to dataset ✅\n","Image sizes 640 train, 640 val\n","Using 2 dataloader workers\n","Logging results to \u001b[1mruns/train/yolo_road_det\u001b[0m\n","Starting training for 100 epochs...\n","\n","     Epoch   gpu_mem       box       obj       cls    labels  img_size\n","      0/99     6.24G   0.09677   0.03182   0.02531        14       640: 100% 41/41 [01:36<00:00,  2.36s/it]\n","               Class     Images     Labels          P          R     mAP@.5 mAP@.5:.95: 100% 3/3 [00:04<00:00,  1.48s/it]\n","                 all        161        192     0.0773      0.314      0.104     0.0172\n","\n","     Epoch   gpu_mem       box       obj       cls    labels  img_size\n","      1/99     6.94G   0.05976    0.0286   0.01959        12       640: 100% 41/41 [01:34<00:00,  2.30s/it]\n","               Class     Images     Labels          P          R     mAP@.5 mAP@.5:.95: 100% 3/3 [00:03<00:00,  1.29s/it]\n","                 all        161        192      0.836      0.382      0.446     0.0814\n","\n","     Epoch   gpu_mem       box       obj       cls    labels  img_size\n","      2/99     6.94G   0.05491   0.02031   0.01553        13       640: 100% 41/41 [01:34<00:00,  2.30s/it]\n","               Class     Images     Labels          P          R     mAP@.5 mAP@.5:.95: 100% 3/3 [00:03<00:00,  1.23s/it]\n","                 all        161        192      0.865      0.408       0.54      0.147\n","\n","     Epoch   gpu_mem       box       obj       cls    labels  img_size\n","      3/99     6.94G   0.05157   0.01774  0.008303        18       640: 100% 41/41 [01:34<00:00,  2.31s/it]\n","               Class     Images     Labels          P          R     mAP@.5 mAP@.5:.95: 100% 3/3 [00:03<00:00,  1.15s/it]\n","                 all        161        192      0.738      0.714      0.697      0.308\n","\n","     Epoch   gpu_mem       box       obj       cls    labels  img_size\n","      4/99     6.94G      0.05   0.01593  0.004623        22       640: 100% 41/41 [01:34<00:00,  2.30s/it]\n","               Class     Images     Labels          P          R     mAP@.5 mAP@.5:.95: 100% 3/3 [00:03<00:00,  1.10s/it]\n","                 all        161        192       0.63       0.71       0.64      0.293\n","\n","     Epoch   gpu_mem       box       obj       cls    labels  img_size\n","      5/99     6.94G   0.04551   0.01458  0.003399        21       640: 100% 41/41 [01:34<00:00,  2.30s/it]\n","               Class     Images     Labels          P          R     mAP@.5 mAP@.5:.95: 100% 3/3 [00:03<00:00,  1.15s/it]\n","                 all        161        192      0.532      0.934      0.619      0.268\n","\n","     Epoch   gpu_mem       box       obj       cls    labels  img_size\n","      6/99     6.94G   0.04265   0.01319  0.002991        16       640: 100% 41/41 [01:34<00:00,  2.30s/it]\n","               Class     Images     Labels          P          R     mAP@.5 mAP@.5:.95: 100% 3/3 [00:03<00:00,  1.12s/it]\n","                 all        161        192      0.715      0.673      0.754      0.369\n","\n","     Epoch   gpu_mem       box       obj       cls    labels  img_size\n","      7/99     6.94G   0.03862   0.01267   0.00269        10       640: 100% 41/41 [01:34<00:00,  2.30s/it]\n","               Class     Images     Labels          P          R     mAP@.5 mAP@.5:.95: 100% 3/3 [00:03<00:00,  1.13s/it]\n","                 all        161        192      0.728      0.977      0.781      0.413\n","\n","     Epoch   gpu_mem       box       obj       cls    labels  img_size\n","      8/99     6.94G   0.03823   0.01197  0.002471        18       640: 100% 41/41 [01:34<00:00,  2.30s/it]\n","               Class     Images     Labels          P          R     mAP@.5 mAP@.5:.95: 100% 3/3 [00:03<00:00,  1.17s/it]\n","                 all        161        192      0.593       0.91      0.738      0.323\n","\n","     Epoch   gpu_mem       box       obj       cls    labels  img_size\n","      9/99     6.94G   0.03631   0.01179  0.002363        16       640: 100% 41/41 [01:34<00:00,  2.30s/it]\n","               Class     Images     Labels          P          R     mAP@.5 mAP@.5:.95: 100% 3/3 [00:03<00:00,  1.14s/it]\n","                 all        161        192      0.647      0.893      0.763      0.405\n","\n","     Epoch   gpu_mem       box       obj       cls    labels  img_size\n","     10/99     6.94G   0.03488   0.01099   0.00197        82       640:  17% 7/41 [00:16<01:19,  2.35s/it]"]}]}]}